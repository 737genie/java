package Socket;

public class SocketExam {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 소켓 프로그래밍 : 네트워크를 통해 서로다른 컴퓨터간에 데이터를 주고받기 위해
		//  소켓이라는것을 사용하는 프로그래밍 스킬.
		// 소켓 : 네트워크 통신을 위한 종단점(엔드포인트). 
		//   -> IP, Port번호를 기반으로 작동. 
		//   -> UDP 프로토콜. (패스트푸드 통신)
		//     (온라인게임, 스트리밍) 
		
		
		
		
		//  -> 난이도가 어려움.
		//  -> 코드 작성이 어렵냐? -> 통신에 대한 지식이 기반되어야해서 어려움.
		
		// 서버, 클라이언트, 프로토콜, 네트워크, 서버의 상태들.
		
		// 누렁이와 탱고
		// 누렁이(클라이언트) : 친구 탱고에게 항상 먼저 안부를 묻는 강아지
		//  -> 누렁이는 탱고에게 대화 요청을 한것.
		// 먼저 요청하는쪽이 클라이언트가 된다.
		// 탱고(서버) : 누렁이의 연락을 언제나 기다리고 연락이오면 응답해주는 고양이.
		//  -> 누렁이에게 연락이 오면 누렁이가 보낸 메세지를 기반으로 응답을 해주는 것.
		//  언제나 요청을 기다리고 응답하는쪽.
		
		// 누렁이와 탱고가 대화하려면 탱고가 어딨는지 정확히 알고가야할 필요가있음
		//  -> 상대방의 컴퓨터(서버)접근하기 위해서는 위치가 어딘지 방이 어딘지 알필요가 있음.
		// IP 주소 : 집 주소, 포트번호 : 방 번호)
		//  -> 통신규약(프로토콜)에는 자기집주소를 쉽게 나타낼수 있는 개념이 있음
		//     localhost라고 부름.(127.0.0.1)
		
		// 즉 누렁이가 탱고에게 말을 걸기 위해서는
		//  정확하게 탱고의 집주소와 방문번호를 알고 가야한다.
		
		
		
		// 준비된 자와 찾아가는자. 
		// 클라이언트는 서버가 어떻게 구현되었는지 내부를 알필요가 있나요?
		//  -> 복잡한 내부사정은 알필요가 없지만 정해진 약속에따라 요청하고 응답을 받기만하면
		//     되는것이 클라이언트의 목적.
		
		// 코드로 직접구현 : 
		// 과정 자체를 요약
		
		// 서버(논리적인/프로그램적 서버)라는것을 구축하기 위해서는 
		// 우선 필요한것은 자신의 서버(컴퓨터)에 특정한 포트를 허용하여 열어둔뒤
		// 손님 맞을 준비를 해야한다.
		//  -> 이것이 서버 소켓.
		
		// 클라이언트(누렁이)
		// 누렁이는 탱고에게 말을 걸고 싶은거. 
		//  -> 클라이언트는 서버에 접근하여 무언가 필요한것을 진행.
		
		// 이쪽세계는 말을 걸기 위해서는 해당 친구의 집주소와 방번호를 정확히
		// 알고있어야함
		//  -> 클라이언트는 서버에 접근하기 위해서는 IP주소와 포트번호를 정확히 알고
		//     접근해야함.
		
		// 누렁이는 탱고네 방으로 가기 위해 전화기를 준비. 
		//  -> 탱고네 집 9999번 방으로 연결해줘!
	
		// 연결이 성공하면 누렁이와 탱고의 대화가 가능!
		
		// 네트워크
		//  -> 여러대의 컴퓨터를 통신회선으로 연결한것.
		
		// 홈 네트워크 : 컴퓨터가 방마다 있고 이들 컴퓨터를
		//  -> 유선이나 무선등의 통신 회선으로 연결되어있는 상황
		// 지역 네트워크 : 회사나 건물등 특정 영역에 존재하는 컴퓨터를 통신회선으로 연결한것.
		// 인터넷
		
		// 프로토콜 : 인터넷상에 정의되어있는 약속, 규칙
		
		// IP 주소 : 네트워크상에서 컴퓨터를 식별하는 번호.
		// cmd -> ipconfig라고 쓰시면 본인 컴퓨터 ip 확인이 가능.
		
		// 포트 : 같은 컴퓨터 내에서 프로그램을 식별하는 번호.
		
		// 0~1023 : ICANN 이 특정 어플리케이션용으로 미리 예약해둔 포트.
		// 1024~49151 : 회사에서 등록해서 사용할수 있는 포트.
		//  ex) mysql 3306, oracle 1521
		// 49152~65535 : os가 부여하는 동적인 포트 혹은 개인적인 목적으로사용하는 포트.
		
		// IP? TCP/IP?
		
		// TCP(Transmission Control Protocol) 
		//  -> 연결 지향적 프로토콜 (연결이 우선이다)
		//  -> 데이터를 정확하고 안정적으로 전달하는 장점이 있으나 전송속도가 느려질수가 있음.
		
		
		
		
		
	}

}